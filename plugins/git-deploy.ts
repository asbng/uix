import { AppPlugin } from "../utils/config_files.ts";
import { GitRepo } from "../utils/git.ts";
import { json2yaml } from "https://deno.land/x/json2yaml@v1.0.1/mod.ts";

declare const Datex: any; // cannot import Datex here, circular dependency problems

export class GitDeployPlugin implements AppPlugin {
	name = "git_deploy"

	async apply(data: Record<string, unknown>) {
		data = Object.fromEntries(Datex.DatexObject.entries(data));

		const gitRepo = await GitRepo.get()
		const workflowDir = await gitRepo.initWorkflowDirectory();

		// TODO: also support gitlab
		const workflows = this.generateGithubWorkflows(data);

		for (const [fileName, content] of Object.entries(workflows)) {
			await Deno.writeTextFile(workflowDir.getChildPath(fileName), content)
		}

	}

	generateGithubWorkflows(data: Record<string, unknown>) {
		const workflows: Record<string,string> = {}

		for (let [stage, config] of Object.entries(data)) {
			config = Object.fromEntries(Datex.DatexObject.entries(config));

			let on = config.on;
			const branch = config.branch;
			if (branch && branch !== "*") {
				on = {
					[on]: {
						branches: branch instanceof Array ? branch : [branch]
					}
				}
			}

			const workflow = {
				name: `Deploy ${stage}`,
				on,
				jobs: {
					deploy: {
						'runs-on': 'ubuntu-latest',
						steps: [
							{
								name: 'Checkout Repo',
								uses: 'actions/checkout@v3'
							},
							{
								name: 'Setup Deno',
								uses: 'denoland/setup-deno@v1',
								with: {
									'deno-version': '1.32.5'
								}
							},
							{
								name: 'Deploy UIX App',
								run: `cd src && deno run --importmap https://dev.cdn.unyt.org/importmap.json -Aqr https://dev.cdn.unyt.org/uix/run.ts --stage ${stage} --detach`
							}
						]
					}
				}
			}

			workflows[`uix-deploy-${stage}.yml`] = `# This file was auto generated by the uix git_deploy plugin. Do not manually edit.\n\n${json2yaml(JSON.stringify(workflow))}` 
		}

		return workflows
	}
}